/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var w=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var G=Object.prototype.hasOwnProperty;var R=(o,s)=>{for(var t in s)w(o,t,{get:s[t],enumerable:!0})},H=(o,s,t,e)=>{if(s&&typeof s=="object"||typeof s=="function")for(let r of j(s))!G.call(o,r)&&r!==t&&w(o,r,{get:()=>s[r],enumerable:!(e=V(s,r))||e.enumerable});return o};var J=o=>H(w({},"__esModule",{value:!0}),o);var K={};R(K,{default:()=>P});module.exports=J(K);var O=require("obsidian");var d=require("obsidian"),u=class extends d.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new d.Setting(t).setName("PDF folder").setDesc("Folder to save imported PDFs").addText(e=>e.setPlaceholder("Example: Assets").setValue(this.plugin.settings.pdfFolder).onChange(async r=>{this.plugin.settings.pdfFolder=r,await this.plugin.saveSettings()})),new d.Setting(t).setName("Note folder").setDesc("Folder to save auto-generated notes for imported PDFs").addText(e=>e.setPlaceholder("Example: Notes").setValue(this.plugin.settings.noteFolder).onChange(async r=>{this.plugin.settings.noteFolder=r,await this.plugin.saveSettings()}))}},M={pdfFolder:"Assets",noteFolder:"Literature Notes"};var i=require("obsidian");var X=require("obsidian");async function z(o){var h,F,S,v,I,E,b,$,A,q,D,T,C,_,k,U;let s=`https://export.arxiv.org/api/query?id_list=${o}`,t=await(0,X.requestUrl)({url:s}),a=new DOMParser().parseFromString(t.text,"text/xml").querySelector("entry"),n=(F=(h=a.querySelector("title"))==null?void 0:h.textContent)==null?void 0:F.trim();if(!n||n==="Error"){let x=((v=(S=a.querySelector("summary"))==null?void 0:S.textContent)==null?void 0:v.trim())||"Unknown error";throw new Error(x)}let p=Array.from(a.querySelectorAll("author")).map(x=>{var N,L;return((L=(N=x.querySelector("name"))==null?void 0:N.textContent)==null?void 0:L.trim())||"Unknown author"}),l=((E=(I=a.querySelector("published"))==null?void 0:I.textContent)==null?void 0:E.trim())||"",m=(($=(b=a.querySelector("summary"))==null?void 0:b.textContent)==null?void 0:$.trim().replace(/\n/g," "))||"No abstract available",c=((q=(A=a.querySelector("comment"))==null?void 0:A.textContent)==null?void 0:q.trim())||"",y=((_=(C=(T=(D=a.querySelector("id"))==null?void 0:D.textContent)==null?void 0:T.split("/"))==null?void 0:C.pop())==null?void 0:_.trim())||"",g=((U=(k=a.querySelector("link[title='pdf']"))==null?void 0:k.getAttribute("href"))==null?void 0:U.trim())||"";return{paperId:y,title:n,authors:p,date:l,abstract:m,comments:c,pdfUrl:g}}var B=`---
paper id: {{ paper_id }}
title: {{ title }}
authors: {{ authors }}
publication date: {{ date }}
abstract: {{ abstract }}
comments: {{ comments }}
pdf: {{ pdf_link }}
url: https://arxiv.org/abs/{{ paper_id }}
tags: []
---
`;var f=class extends i.Modal{constructor(t,e){super(t);this.settings=e}onOpen(){let{contentEl:t}=this;t.createEl("h4",{text:"Import Paper from arXiv"}),t.createEl("p",{text:"Enter the arXiv ID or URL of the paper you want to import. Press Enter to confirm.",attr:{style:"margin-bottom: 20px; color: gray"}}),t.createEl("input",{attr:{type:"text",style:"width: 100%;",id:"paper-title-input"}}),t.addEventListener("keypress",async e=>{if(e.key==="Enter"){new i.Notice("Importing paper...");let r=t.querySelector("#paper-title-input").value,a;try{a=this.extractArxivId(r)}catch(n){new i.Notice(n.message);return}try{let[n,p]=await this.searchAndImportPaper(a);await this.app.workspace.openLinkText(n,"",!0)}catch(n){new i.Notice(n.message)}new i.Notice("Paper imported!"),this.close()}})}onClose(){let{contentEl:t}=this;t.empty()}async searchAndImportPaper(t){let e=await z(t),r=(0,i.normalizePath)(this.settings.pdfFolder),a=this.app.vault.getFolderByPath(r);a||(a=await this.app.vault.createFolder(r));let n=this.sanitizeFilename(`${e.title} (${e.paperId}).pdf`),p=(0,i.normalizePath)(`${a.path}/${n}`),l=await(0,i.requestUrl)(e.pdfUrl);await this.app.vault.adapter.writeBinary(p,l.arrayBuffer);let m=(0,i.normalizePath)(this.settings.noteFolder),c=this.app.vault.getFolderByPath(m);c||(c=await this.app.vault.createFolder(m));let y=this.sanitizeFilename(`${e.title} (${e.paperId}).md`),g=(0,i.normalizePath)(`${c.path}/${y}`),h=B.replace(/{{\s*paper_id\s*}}/g,e.paperId).replace(/{{\s*title\s*}}/g,`"${e.title}"`).replace(/{{\s*authors\s*}}/g,e.authors.join(", ")).replace(/{{\s*date\s*}}/g,e.date).replace(/{{\s*abstract\s*}}/g,`"${e.abstract}"`).replace(/{{\s*comments\s*}}/g,`"${e.comments}"`).replace(/{{\s*pdf_link\s*}}/g,`"[[${p}]]"`);return await this.app.vault.adapter.write(g,h),[g,p]}extractArxivId(t){let e=/^arXiv:(\d{4}\.\d{4,5})$/,r=t.match(e);if(r)return r[r.length-1];let a=/^\d{4}\.\d{4,5}$/,n=t.match(a);if(n)return n[0];let p=/^(https?:\/\/)?(www\.)?arxiv\.org\/(abs|pdf)\/(\d{4}\.\d{4,5})$/,l=t.match(p);if(l)return l[l.length-1];throw new Error("Invalid arXiv ID or URL")}sanitizeFilename(t){return t.replace(/[/\\?%*:|"<>]/g," ").replace(/\s+/g," ").trim()}};var P=class extends O.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"import_pdf_from_arxiv",name:"Import PDF from arXiv",callback:()=>{new f(this.app,this.settings).open()}}),this.addSettingTab(new u(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},M,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */